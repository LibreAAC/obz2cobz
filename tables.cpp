#include "utils.hpp"

constexpr int SUPPORTED_IMAGE_EXT_COUNT = 11;
const char* const SUPPORTED_IMAGE_EXT[SUPPORTED_IMAGE_EXT_COUNT] = {
  "png","jpg","jpeg","tga","bmp","psd","gif","hdr","pic","pnm","svg"
};
bool is_image_ext_supported(const char* extension)
{
  for (int i = 0; i < SUPPORTED_IMAGE_EXT_COUNT; i++)
    if (str_eq(extension, SUPPORTED_IMAGE_EXT[i]))
      return true;
  return false;
}

constexpr int LEGACY_COLORS_COUNT = 148;
const char* const LEGACY_COLOR_NAMES[LEGACY_COLORS_COUNT] = {
"aliceblue",
"antiquewhite",
"aqua",
"aquamarine",
"azure",
"beige",
"bisque",
"black",
"blanchedalmond",
"blue",
"blueviolet",
"brown",
"burlywood",
"cadetblue",
"chartreuse",
"chocolate",
"coral",
"cornflowerblue",
"cornsilk",
"crimson",
"cyan",
"darkblue",
"darkcyan",
"darkgoldenrod",
"darkgray",
"darkgrey",
"darkgreen",
"darkkhaki",
"darkmagenta",
"darkolivegreen",
"darkorange",
"darkorchid",
"darkred",
"darksalmon",
"darkseagreen",
"darkslateblue",
"darkslategray",
"darkslategrey",
"darkturquoise",
"darkviolet",
"deeppink",
"deepskyblue",
"dimgray",
"dimgrey",
"dodgerblue",
"firebrick",
"floralwhite",
"forestgreen",
"fuchsia",
"gainsboro",
"ghostwhite",
"gold",
"goldenrod",
"gray",
"grey",
"green",
"greenyellow",
"honeydew",
"hotpink",
"indianred",
"indigo",
"ivory",
"khaki",
"lavender",
"lavenderblush",
"lawngreen",
"lemonchiffon",
"lightblue",
"lightcoral",
"lightcyan",
"lightgoldenrodyellow",
"lightgray",
"lightgrey",
"lightgreen",
"lightpink",
"lightsalmon",
"lightseagreen",
"lightskyblue",
"lightslategray",
"lightslategrey",
"lightsteelblue",
"lightyellow",
"lime",
"limegreen",
"linen",
"magenta",
"maroon",
"mediumaquamarine",
"mediumblue",
"mediumorchid",
"mediumpurple",
"mediumseagreen",
"mediumslateblue",
"mediumspringgreen",
"mediumturquoise",
"mediumvioletred",
"midnightblue",
"mintcream",
"mistyrose",
"moccasin",
"navajowhite",
"navy",
"oldlace",
"olive",
"olivedrab",
"orange",
"orangered",
"orchid",
"palegoldenrod",
"palegreen",
"paleturquoise",
"palevioletred",
"papayawhip",
"peachpuff",
"peru",
"pink",
"plum",
"powderblue",
"purple",
"rebeccapurple",
"red",
"rosybrown",
"royalblue",
"saddlebrown",
"salmon",
"sandybrown",
"seagreen",
"seashell",
"sienna",
"silver",
"skyblue",
"slateblue",
"slategray",
"slategrey",
"snow",
"springgreen",
"steelblue",
"tan",
"teal",
"thistle",
"tomato",
"turquoise",
"violet",
"wheat",
"white",
"whitesmoke",
"yellow",
"yellowgreen"
};
const u32 LEGACY_COLOR_BYTES[LEGACY_COLORS_COUNT] = {
0xF0F8FFFF,
0xFAEBD7FF,
0x00FFFFFF,
0x7FFFD4FF,
0xF0FFFFFF,
0xF5F5DCFF,
0xFFE4C4FF,
0x000000FF,
0xFFEBCDFF,
0x0000FFFF,
0x8A2BE2FF,
0xA52A2AFF,
0xDEB887FF,
0x5F9EA0FF,
0x7FFF00FF,
0xD2691EFF,
0xFF7F50FF,
0x6495EDFF,
0xFFF8DCFF,
0xDC143CFF,
0x00FFFFFF,
0x00008BFF,
0x008B8BFF,
0xB8860BFF,
0xA9A9A9FF,
0xA9A9A9FF,
0x006400FF,
0xBDB76BFF,
0x8B008BFF,
0x556B2FFF,
0xFF8C00FF,
0x9932CCFF,
0x8B0000FF,
0xE9967AFF,
0x8FBC8FFF,
0x483D8BFF,
0x2F4F4FFF,
0x2F4F4FFF,
0x00CED1FF,
0x9400D3FF,
0xFF1493FF,
0x00BFFFFF,
0x696969FF,
0x696969FF,
0x1E90FFFF,
0xB22222FF,
0xFFFAF0FF,
0x228B22FF,
0xFF00FFFF,
0xDCDCDCFF,
0xF8F8FFFF,
0xFFD700FF,
0xDAA520FF,
0x808080FF,
0x808080FF,
0x008000FF,
0xADFF2FFF,
0xF0FFF0FF,
0xFF69B4FF,
0xCD5C5CFF,
0x4B0082FF,
0xFFFFF0FF,
0xF0E68CFF,
0xE6E6FAFF,
0xFFF0F5FF,
0x7CFC00FF,
0xFFFACDFF,
0xADD8E6FF,
0xF08080FF,
0xE0FFFFFF,
0xFAFAD2FF,
0xD3D3D3FF,
0xD3D3D3FF,
0x90EE90FF,
0xFFB6C1FF,
0xFFA07AFF,
0x20B2AAFF,
0x87CEFAFF,
0x778899FF,
0x778899FF,
0xB0C4DEFF,
0xFFFFE0FF,
0x00FF00FF,
0x32CD32FF,
0xFAF0E6FF,
0xFF00FFFF,
0x800000FF,
0x66CDAAFF,
0x0000CDFF,
0xBA55D3FF,
0x9370DBFF,
0x3CB371FF,
0x7B68EEFF,
0x00FA9AFF,
0x48D1CCFF,
0xC71585FF,
0x191970FF,
0xF5FFFAFF,
0xFFE4E1FF,
0xFFE4B5FF,
0xFFDEADFF,
0x000080FF,
0xFDF5E6FF,
0x808000FF,
0x6B8E23FF,
0xFFA500FF,
0xFF4500FF,
0xDA70D6FF,
0xEEE8AAFF,
0x98FB98FF,
0xAFEEEEFF,
0xDB7093FF,
0xFFEFD5FF,
0xFFDAB9FF,
0xCD853FFF,
0xFFC0CBFF,
0xDDA0DDFF,
0xB0E0E6FF,
0x800080FF,
0x663399FF,
0xFF0000FF,
0xBC8F8FFF,
0x4169E1FF,
0x8B4513FF,
0xFA8072FF,
0xF4A460FF,
0x2E8B57FF,
0xFFF5EEFF,
0xA0522DFF,
0xC0C0C0FF,
0x87CEEBFF,
0x6A5ACDFF,
0x708090FF,
0x708090FF,
0xFFFAFAFF,
0x00FF7FFF,
0x4682B4FF,
0xD2B48CFF,
0x008080FF,
0xD8BFD8FF,
0xFF6347FF,
0x40E0D0FF,
0xEE82EEFF,
0xF5DEB3FF,
0xFFFFFFFF,
0xF5F5F5FF,
0xFFFF00FF,
0x9ACD32FF
};
// return -1 if color wasn't found, otherwise returns a u32 (within a i64) of the color as rgba8 (r is big end)
i64 u32_legacy_color(const char* name)
{
  int begin = 0, end = LEGACY_COLORS_COUNT;
  int mid;
  const int len = str_len(name)+1;
  char* s = (char*)alloca(len);
  for (int i = 0; i < len; i++)
  {
    if (name[i] >= 'A' && name[i] <= 'Z')
      s[i] = name[i] - 'A' + 'a';
    else
      s[i] = name[i];
  }
  while (begin != end)
  {
    mid = (begin + end) / 2;
    const int cmp = strcmp(s, LEGACY_COLOR_NAMES[mid]);
    if (cmp == -1)
      begin = mid;
    else if (cmp == 1)
      end = mid;
    else
      return LEGACY_COLOR_BYTES[mid];
  }
  return -1;
}


